@model VonderkWEB.Models.Work

@{
    ViewBag.Title = "Crear novedad";
}

<script>
    $(function () {

        $("#sortable").sortable();
        $("#sortable").disableSelection();
    });
</script>

<style>

    #sortable {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 800px;
    }

        #sortable li {
            margin: 3px 3px 3px 0;
            padding: 1px;
            float: left;
            width: 200px;
            font-size: 1em;
            text-align: center;
        }

            #sortable li span {
                position: absolute;
                margin-left: -1.3em;
            }

    .gallery {
        margin-left: 100px;
    }
</style>



<div class="content">

    <h2>Crear novedad</h2>

    <form role="form" method="post" action="/Works/Create" enctype="multipart/form-data">

        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>


            @*-----------------------------------------------/UPLOAD multiple IMAGE TEST/------------------------------------------------------------------------------------------*@
            <div class="row">
                <div class="col-25">
                    @Html.LabelFor(model => model.WorkAssets, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>
                <div class="col-75">
                    <input type="file" multiple="multiple" id="imageFiles" name="imageFiles" data-buttonname="btn-primary" data-input="false" data-buttontext="Buscar archivo">
                </div>
            </div>


            @*------------------------------------------------/END multiple IMAGE TEST/-----------------------------------------------------------------------------------------*@



            @*<div class="demo">

                    <div class="gallery">
                        <ul id="sortable" class="gallery"></ul>
                    </div>

                </div>*@<!-- End demo -->
            <div class="flex-container">
                <div class="demo">

                    <div class="box gallery">
                        <h2>Images Archivos</h2>
                        <ul id="sortable" class="imageGallery">
                           
                        </ul>
                    </div>


                </div><!-- End demo -->

            </div>
            @Html.Hidden("deletedAssets")
            @Html.Hidden("labeledAssets")
            @Html.Hidden("imagesList")

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Crear" class="btn btn-default" />
                </div>
            </div>
        </div>

    </form>

    <div style="padding-top: 150px">
        @Html.ActionLink("Cancelar y volver al listado", "Index")
    </div>
</div>





@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


}


<script>

    //Delete images before submit
    function remove(assetID) {

        $('li.asset[data-id=' + assetID + ']').remove();
        o = $('#deletedAssets').val();
        $('#deletedAssets').val(o + "," + assetID);
    }
    function removeByName(assetName) {
        $('li.asset[data-name="' + assetName + '"]').remove();
    }
    function removeAsset(assetID) {

        $('p.testing[data-id=' + assetID + ']').remove();

    }

    $(function () {


        var $sortableList = $("#sortable");


        // Multiple images preview in browser
        var imagesPreview = function (input, placeToInsertImagePreview) {

            if (input.files) {
                var filesAmount = input.files.length;

                for (i = 0; i < filesAmount; i++) {

                    var reader = new FileReader();

                    reader.onload = function (event) {
                        var idx = $('li.text-preview').length;
                        console.log(input.files[idx]);
                        var p = $('<li class="asset onlyImage text-preview ui-state-default" data-id="' + input.files[idx].name + '" data-name="' + input.files[idx].name + '">' + '</li>').appendTo(placeToInsertImagePreview);
                        $('<img width="100" height="100" class="img_class">').attr('src', event.target.result).appendTo(p);
                        $('<a onclick="removeByName(\'' + input.files[idx].name + '\')">Borrar</a>').appendTo(p);
                    }
                    reader.readAsDataURL(input.files[i]);

                }


            }

        };

        $('#imageFiles').on('change', function () {


            var files = $('#imageFiles')[0].files;
            var totalSize = 0;

            for (var i = 0; i < files.length; i++) {
                totalSize += files[i].size;
            }
            if (totalSize < 10485760) {
                imagesPreview(this, 'ul.imageGallery');
            } else {
                alert("A superado el limite máximo de subida (10MB). Por favor, intente nuevamente");
                window.location.reload(true);
            }
        });




        var listValues = [];

        var sortEventHandler = function (event, ui) {

            console.log("New sort order!");

            var listElements = $sortableList.children();
            var listOrder = [];

            console.log(listElements); // [ <li>, <li>, ... ]

            listElements.each(function (index, element) {
                listValues.push(element.innerText);
                listOrder.push($(element).data('name'));
            });

            var myJSON = JSON.stringify(listOrder);

            document.getElementById("hiddenField").value = myJSON;

        };

        $sortableList.sortable({
            stop: sortEventHandler
        });

        console.log(listValues); // [ "Item 1", "Item 2", ... ]



    });



    (function () {

        $('#form1').submit(function () {


            $('li.onlyImage').each(function (i, e) {
                var o = $('#imagesList').val();
                $('#imagesList').val(o + '|' + $(e).data('name'));
            });

            $('li.onlyImage').each(function (i, e) {
                var o = $('#labeledAssets').val();
                $('#labeledAssets').val(o + '|' + $(e).data('name') + '^' + $(e).data('name'));
            });

            return true;
        });

    })();


</script>
